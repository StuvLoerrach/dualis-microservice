swagger: "2.0"
info:
  description: "A microservice written in Go which provides the data for the Dualis feature of DHBW LÃ¶rrach Campus App"
  version: "1.0.0"
  title: "dualis-microservice"
  contact:
    email: "kaiseand@dhbw-loerrach.de"
schemes:
- "http"
paths:
  /login/:
    post:
      summary: "Performs a login"
      operationId: "login"
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: login
          required: true
          schema:
            $ref: "#/definitions/LoginRequest"
      responses:
        200:
          description: "Login successful"
          schema:
            $ref: "#/definitions/LoginResponse"
        500:
          description: "An error occured"
          schema:
            $ref: "#/definitions/SimpleError"
  /students/:
    get:
      summary: "Gets DHBW students with various filters"
      operationId: "students"
      consumes:
        - application/json
      parameters:
        - in: query
          name: studentId
          type: integer
        - in: query
          name: course
          type: integer
        - in: query
          name: email
          type: string
      produces:
        - application/json
      responses:
        200:
          description: "Got student(s) successfully!"
          schema:
            $ref: "#/definitions/StudentList"
        204:
          description: "No student matches this criteria!"
        500:
          description: "Couldn't get student(s)!"
          schema:
            $ref: "#/definitions/SimpleError"
      security:
      - dualis_key: []
  /student/performance/:
    get:
      summary: "Gets DHBW students performances with various filters"
      operationId: "studentPerformance"
      consumes:
        - application/json
      parameters:
        - in: query
          name: isWintersemester
          type: boolean
        - in: query
          name: year
          type: string
      produces:
        - application/json
      responses:
        200:
          description: "Got the students performances successfully!"
          schema:
            $ref: "#/definitions/PerformancesList"
        204:
          description: "No performances found for this criteria!"
        500:
          description: "Couldn't get performances!"
          schema:
            $ref: "#/definitions/SimpleError"
      security:
      - dualis_key: []
  /student/module/statistics/:
    get:
      summary: "Tells how a student performed in a module relative to his class"
      operationId: "studentModuleStatistics"
      consumes:
        - application/json
      parameters:
        - in: query
          name: enrollmentId
          type: integer
          required: true
      produces:
        - application/json
      responses:
        200:
          description: "Got the relative performance in the module successfully!"
          schema:
            $ref: "#/definitions/ModuleStatistics"
        204:
          description: "The enrollmentId doesn't exist, has no corresponding module or hasn't been evaluated yet!"
        500:
          description: "Couldn't get relative module performance!"
          schema:
            $ref: "#/definitions/SimpleError"
      security:
      - dualis_key: []
securityDefinitions:
  dualis_key:
    type: "apiKey"
    name: "x-api-key"
    in: "header"
definitions:
  LoginRequest:
    type: "object"
    required:
      - email
      - password
    properties:
      email:
        type: "string"
      password:
        type: "string"
  LoginResponse:
    type: "object"
    required:
      - jwt
    properties:
      jwt:
        type: "string"
        minLength: 1
        description: "A JSON Web Token which can be used to authenticate"
  Enrollment:
    type: "object"
    required:
      - status
      - semester
      - moduleResult
    properties:
      grade:
        type: "string"
        description: "Grade of the student for this module"
      status:
        type: "string"
        description: "Status of the evaluation"
      semester:
        type: "string"
        description: "Semester when the enrollment took place"
      moduleResult:
        type: "array"
        maxItems: 1
        items:
          $ref: "#/definitions/ModuleResult"
        description: "Module that was enrolled in"
  LectureResult:
    type: "object"
    required:
      - number
      - name
      - weighting
      - examType
    properties:
      number:
        type: "string"
        description: "Lecture number"
      name:
        type: "string"
        description: "Name of the lecture"
      weighting:
        type: "string"
        description: "How much the lecture weights in the module"
      examType:
        type: "string"
        description: "Type of the exam"
      grade:
        type: "string"
        description: "Grade of the student for this lecture"
      presence:
        type: "boolean"
        description: "Whether the student was present enough to complete the lecture"
  ModuleResult:
    type: "object"
    required:
      - number
      - name
      - credits
      - lectureResults
    properties:
      number:
        type: "string"
        description: "Module number"
      name:
        type: "string"
        description: "Name of the module"
      credits:
        type: "string"
        description: "How many credits the module is worth"
      lectureResults:
        type: "array"
        items:
          $ref: "#/definitions/LectureResult"
        description: "Results in the corresponding lectures"
  PerformancesList:
    type: "object"
    required:
      - enrollments
    properties:
      enrollments:
        type: "array"
        items:
          $ref: "#/definitions/Enrollment"
        description: "A list of enrollments"
  ModuleStatistics:
    type: "object"
    required:
      - better
      - equal
      - worse
      - failureRate
    properties:
      better:
        type: "string"
        description: "Percentage of students better than the said student"
      equal:
        type: "string"
        description: "Percentage of the students equal to the said student"
      worse:
        type: "string"
        description: "Percentage of the students worse than the said student"
      failureRate:
        type: "string"
        description: "Failure rate in percent"
  Student:
    type: "object"
    required:
      - id
      - email
      - course
    properties:
      id:
        type: "integer"
        description: "Id of the student"
      email:
        type: "string"
        description: "Email of the student"
      course:
        type: "integer"
        description: "DHBW course of the student"
  StudentList:
    type: "object"
    required:
      - students
    properties:
      students:
        type: "array"
        items:
          $ref: "#/definitions/Student"
        description: "A list of DHBW students"
  SimpleError:
    type: "object"
    required: 
      - error
    properties:
      error:
        type: "string"
        description: "An error message"

